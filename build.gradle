description = 'Spring Integration Splunk Support'

buildscript {
	repositories {
		maven { url 'http://repo.spring.io/plugins-release' }
	}
	dependencies {
		classpath 'io.spring.gradle:docbook-reference-plugin:0.3.1'
		classpath 'io.spring.gradle:spring-io-plugin:0.0.4.RELEASE'
	}
}

apply plugin: 'java'
apply from:   "${rootProject.projectDir}/publish-maven.gradle"
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'jacoco'

if (project.hasProperty('platformVersion')) {
	apply plugin: 'spring-io'

	dependencyManagement {
		springIoTestRuntime {
			imports {
				mavenBom "io.spring.platform:platform-bom:${platformVersion}"
			}
		}
	}
}

group = 'org.springframework.integration'

repositories {
	maven { url 'http://repo.spring.io/libs-milestone' }
	if (project.hasProperty('platformVersion')) {
		maven { url 'https://repo.spring.io/snapshot' }
	}
}

sourceCompatibility = targetCompatibility = 1.7

ext {

	jodaTimeVersion = '2.3'
	splunkVersion = '1.5.0.0'
	springIntegrationVersion = '4.2.2.RELEASE'

	linkHomepage = 'https://github.com/spring-projects/spring-integration-splunk'
	linkCi       = 'https://build.spring.io/browse/INTEXT'
	linkIssue    = 'https://jira.spring.io/browse/INTEXT'
	linkScmUrl           = 'https://github.com/spring-projects/spring-integration-splunk'
	linkScmConnection    = 'https://github.com/spring-projects/spring-integration-splunk.git'
	linkScmDevConnection = 'git@github.com:spring-projects/spring-integration-splunk.git'

	shortName = 'splunk'
}

jacoco {
	toolVersion = "0.7.2.201409121644"
}

dependencies {
	compile "com.splunk:splunk:$splunkVersion"
	compile "org.springframework.integration:spring-integration-core:$springIntegrationVersion"
	compile "joda-time:joda-time:$jodaTimeVersion"
	compile "commons-pool:commons-pool:$commonsPoolVersion"
	compile "commons-codec:commons-codec:$commonsCodecVersion"
	compile "commons-logging:commons-logging:$commonsLoggingVersion"
	compile "org.apache.httpcomponents:httpasyncclient:$commonsHTTPAsyncClientVersion"
	compile "org.apache.httpcomponents:httpasyncclient-cache:$commonsHTTPAsyncClientCacheVersion"
	compile "org.apache.httpcomponents:httpclient:$commonsHTTPClientVersion"
	compile "org.apache.httpcomponents:httpclient-cache:$commonsHTTPClientCacheVersion"
	compile "org.apache.httpcomponents:httpcore:$commonsHTTPCoreVersion"
	compile "org.apache.httpcomponents:httpcore-nio:$commonsHTTPCoreNIOVersion"
	testCompile "org.mockito:mockito-all:$mockitoVersion"
	testCompile "org.springframework.integration:spring-integration-test:$springIntegrationVersion"
	testCompile "org.springframework.integration:spring-integration-stream:$springIntegrationVersion"
	testCompile "junit:junit-dep:$junitVersion"
	testCompile "log4j:log4j:$log4jVersion"
}


eclipse {
	project {
		natures += 'org.springframework.ide.eclipse.core.springnature'
	}
}

sourceSets {
	test {
		resources {
			srcDirs = ['src/test/resources', 'src/test/java']
		}
	}
}



// enable all compiler warnings; individual projects may customize further
[compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:all,-options']

test {
	// suppress all console output during testing unless running `gradle -i`
	logging.captureStandardOutput(LogLevel.INFO)
	maxHeapSize = "1024m"
	jacoco {
		append = false
		destinationFile = file("$buildDir/jacoco.exec")
	}
}

jacocoTestReport {
	reports {
		xml.enabled false
		csv.enabled false
		html.destination "${buildDir}/reports/jacoco/html"
	}
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

apply plugin: 'docbook-reference'

reference {
	sourceDir = file('src/reference/docbook')
}

apply plugin: 'sonar-runner'

sonarRunner {
	sonarProperties {
		property "sonar.jacoco.reportPath", "${buildDir.name}/jacoco.exec"
		property "sonar.links.homepage", linkHomepage
		property "sonar.links.ci", linkCi
		property "sonar.links.issue", linkIssue
		property "sonar.links.scm", linkScmUrl
		property "sonar.links.scm_dev", linkScmDevConnection
		property "sonar.java.coveragePlugin", "jacoco"
	}
}

task api(type: Javadoc) {
	group = 'Documentation'
	description = 'Generates aggregated Javadoc API documentation.'
	title = "${rootProject.description} ${version} API"
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = rootProject.description
	options.overview = 'src/api/overview.html'
	source subprojects.collect { project ->
		project.sourceSets.main.allJava
	}
	destinationDir = new File(buildDir, "api")
	classpath = files(subprojects.collect { project ->
		project.sourceSets.main.compileClasspath
	})
}

task schemaZip(type: Zip) {
	group = 'Distribution'
	classifier = 'schema'
	description = "Builds -${classifier} archive containing all " +
			"XSDs for deployment at static.springframework.org/schema."

	def Properties schemas = new Properties();

	project.sourceSets.main.resources.find {
		it.path.endsWith("META-INF${File.separator}spring.schemas")
	}?.withInputStream { schemas.load(it) }

	for (def key : schemas.keySet()) {
		File xsdFile = project.sourceSets.main.resources.find {
			it.path.replaceAll('\\\\', '/').endsWith(schemas.get(key))
		}
		assert xsdFile != null
		into ("integration/${shortName}") {
			from xsdFile.path
		}
	}
}

task docsZip(type: Zip) {
		group = 'Distribution'
		classifier = 'docs'
		description = "Builds -${classifier} archive containing api and reference " +
			"for deployment at static.springframework.org/spring-integration/docs."

		from('src/dist') {
			include 'changelog.txt'
		}

		from (api) {
			into 'api'
		}

		from (reference) {
			into 'reference'
		}
}

task distZip(type: Zip, dependsOn: [docsZip, schemaZip]) {
	group = 'Distribution'
	classifier = 'dist'
	description = "Builds -${classifier} archive, containing all jars and docs, " +
		"suitable for community download page."

	ext.baseDir = "${project.name}-${project.version}";

	from('src/dist') {
		include 'readme.txt'
		include 'license.txt'
		include 'notice.txt'
		into "${baseDir}"
	}

	from(zipTree(docsZip.archivePath)) {
		into "${baseDir}/docs"
	}

	from(zipTree(schemaZip.archivePath)) {
		into "${baseDir}/schema"
	}

	subprojects.each { subproject ->
		into ("${baseDir}/libs") {
			from subproject.jar
			from subproject.sourcesJar
			from subproject.javadocJar
		}
	}
}

// Create an optional "with dependencies" distribution.
// Not published by default; only for use when building from source.
task depsZip(type: Zip, dependsOn: distZip) { zipTask ->
	group = 'Distribution'
	classifier = 'dist-with-deps'
	description = "Builds -${classifier} archive, containing everything " +
		"in the -${distZip.classifier} archive plus all dependencies."

	from zipTree(distZip.archivePath)

	gradle.taskGraph.whenReady { taskGraph ->
		if (taskGraph.hasTask(":${zipTask.name}")) {
			def projectNames = rootProject.subprojects*.name
			def artifacts = new HashSet()
			subprojects.each { subproject ->
				subproject.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
					def dependency = artifact.moduleVersion.id
					if (!projectNames.contains(dependency.name)) {
						artifacts << artifact.file
					}
				}
			}

			zipTask.from(artifacts) {
				into "${distZip.baseDir}/deps"
			}
		}
	}
}

artifacts {
	archives distZip
	archives docsZip
	archives schemaZip
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist, -docs and -schema distribution archives.'
}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = '2.5'
    distributionUrl = "http://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}
